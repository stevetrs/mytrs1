本工具支持翻译json格式文件，并将翻译结果以json格式保存在TrsData.bin内。支持多个翻译引擎共同翻译同一文件，记录翻译消耗并在月初自动重置消耗。
若源语言并非英文，支持自动剔除只含英文及特殊符号的无意义文本，以节省字符量消耗。
用之前需要先打开config.json进行配置，把ManualTransFile.json放在跟目录，老规矩，附带py原文件，电脑有python的可以直接运行py文件
成功与否都会有相应提示（大概），已经尽量做了防范措施，但仍有可能因为报错丢失翻译数据，保险起见，百度翻译请开启自动备份
发现bug麻烦把此工具文件夹内所有文件一起打包给我（记得把config.json里的appid和appkey删掉），并告知bug内容
配置文件说明：
{
    "src_rep": 数字,
    "dst_rep": 数字,
    "backupengine": [
        "caiyun",
        "不要设定为正常翻译中使用的引擎，但如果这里面的引擎没有在enginelist里面，月初不会自动重置用量"
    ],
以上为处理异常文本用，翻译过后，原文中连续重复文字出现dst_rep个及以上，译文连续重复文字出现src_rep个及以下的文本
会被标记为异常文本，异常文本会用"backupengine"中的翻译引擎重新翻译一遍
    "cleaner":是否开启剔除无用文本功能（cleaner），1开启，0关闭
    "ja":true,    cleaner的日文模式，会剔除所有不含有日文假名的文本，true开启，false关闭，cleaner关闭时本选项无效
    "en":false,   cleaner的英文模式，会剔除所有不含有大小写字母的文本，不要和ja一起打开，会删掉所有文本的
    "spr":["\r的替换字符串","\n的替换字符串，推荐为特殊符号如☆，↑，↓等的自由组合"]
    "recordtime": {	为上一次使用本工具完成翻译后的时间，程序会通过读取本地时间判断是否要重置字符消耗量
        "year": 2023,
        "month": 4
    },
    "enginelist": [	从上到下按顺序使用这些翻译引擎，如果有不想使用的，请手动删除它们
        "baidu",	不在这个列表内的引擎，可以不设置对应的内容
        "baidu2",
        "caiyun",
        "xiaoniu"
    ],
    "baidu": API申请网址https://fanyi-api.baidu.com/api/trans/product/desktop
            {
                "dic":"字词库的名称,字词库要求是json格式（照着我给的格式拓展就可以），不使用填0（不带引号）",
                "appid": "你的appid",
                "appkey": "密匙",
                "from_lang": "从什么语言，语言代码在这里查https://fanyi-api.baidu.com/product/113",
                "to_lang": "到什么语言",
                "NPQ": 每次请求字符数，最后一次请求会无视这个限制，
	            百度给的上限是6000，字符数太多每次请求时间会变长，而且会变相降低limits，所以不推荐太高，不要带引号,
                "QPS": 每秒请求次数,注意不要带引号,
        	"limits": 1000000,是每月消耗的字符量上限，实际使用量会控制在limits-NPQ左右
	 	            具体来说，如果limits-usage<NPQ，本次翻译就不会使用这个引擎，并且一旦实时判定达到这个条件，就会换用下一个引擎，
	 	            但有一种及其稀有的情况会导致用量超出limits的限制：
	 	            最后一次请求中，如果加上整个待翻译文件中最后一行字符串的长度刚好超过了NPQ，会无视NPQ的限制仍然进行翻译
	 	            而如果这时候usage刚好濒临上限，那么最终使用的usage有可能会超过limits
	 	            比如：NPQ=3000，limits=1000000，最后一次进行翻译时，usage已经达到了996990，因为limits-usage=3010，
	 	            所以仍会用这个引擎进行翻译（这种情况已经很极端了）
	 	            但刚好，计算到倒数第二行字符串时，长度没有超过NPQ，比如说是2995，而最后一行的长度是25，那么最后一次请求就会
	 	            消耗达到3020，使得总消耗超过limits的限制。
	 	            不过因为是按文本从长到短的顺序翻译的，所以一般来说最后几行的字符只会是个位数，如果你真遇到这个情况了，去买张彩票吧
	 	            真怕遇到的话，可以在真正的上限的基础上减去一点，设为999900

        	"usage": 0    是本工具记录的，这个月这个引擎消耗的字符总量，每月初后再使用工具时会自动重置。不通过此工具消耗的字符不会记录在内。
            },
    "baidu2": 所有翻译引擎都可以有多个，只要名字里包含连续的"baidu","caiyun","xiaoniu"就行，如果不需要可以不用填写或直接删掉
	   需要增加其他引擎也可按照格式自行添加，比如"baidu3","wodebaidu"等，但是不要混合两个引擎，比如"baiducaiyun"。
            {
                "dic":"所有引擎的字词库都是通用的",
                "appid":,
                "appkey": ,
                "from_lang": ,
                "to_lang": ,
                "NPQ": 3000,百度的字符限制是按utf-8的字符数算的，一个汉字算3个
                "QPS": 10,
                "limits": 996000,
                "usage": 0
            },
    "caiyun": API控制台地址（应该可以在此申请）https://dashboard.caiyunapp.com/
            {
                "dic":0,
                "token": "等于百度的id+key",
                "direction": "等于百度的from_lang+to_lang，在这里查https://docs.caiyunapp.com/blog/2018/09/03/lingocloud-api/#%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%AD%E8%A8%80",
                "NPQ": 3000，彩云没有QPS限制，字符限制是实打实的5000，一个汉字也算一个字符那种
                "limits": 996000,
                "usage": 0
            },
    "xiaoniu": API申请地址https://niutrans.com/trans?type=text
            {
                "dic":0小牛的这项固定设为0就好,
                "dictNo":"小牛自带免费字词库，推荐用这个，在“控制台”的“资源管理”，“术语词典”里设置，这里填词库id（带引号），不用就改成不带引号的0",
                "apikey": "id+key",
                "from_lang": "日语是ja，语言代码在这查https://niutrans.com/documents/contents/customization_term#languageList",
                "to_lang": "zh",
                "NPQ": 3000,同彩云
                "QPS": 50,
	"limits": 996000,
                "usage": 0
            }
}
字词库的格式
{
    "\n":"\n",
    "A":"V",
    "AAABD":"aaabd"
}
目前的方法是在翻译前将原文中所有"A"替换为"V"，经过我有限次尝试后发现这种方法效果最好（并不好，不推荐使用此功能，"dic"全设为0就好）
存在先后顺序，如上面的库会因为现将全部的A替换为了V，导致"AAABD":"aaabd"不生效
所以最好将短的放在最下面
极其容易误判，整体来说不如mtool的mods功能，所以十分不推荐，能不用就不用