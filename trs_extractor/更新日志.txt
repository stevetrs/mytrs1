v2.4(2023.6.14):
1.优化了判断是否为汉字的函数
2.现在能够支持data文件夹下包含的子文件夹，并对文件名做判断，只会处理json文件
3.添加ico
v2.3(2023.6.6):
1.现在文件全部处理完后，会输出list长度不相等的所有upperkey，便于有能力的人进行筛选，判断是否需要更新config中的upperkey
2.新增一项config设置，用于调整输出文件是否含缩进，含缩进便于人工读取，但会导致文件大小增加
3.一种更新思路：把upperkey中的元素增加dict类，键为文件名，值为upperkey，这样就能针对特定文件开关difflist功能了，
不过目前没看到这个需求，而且实际应用起来也很麻烦，所以就先不实装了。
v2.2(2023.6.5):
1.对list类型数据新增两个判断条件，详细说明如下
"upperkey"：对"difflist”的功能增加限制，只有在这个list的上级路径是dict，且dict的key包含在该项对应的list内时，才会启用上面的功能。整体来讲，会降低
bug几率
"difflist2"：在list长度不相等，但是不满足上面两项共同判断的条件时，是否对文本进行替换。开启此功能，可能会导致涉及到的文本错位，但关闭此功能
会导致这部分文本漏翻。
以某个游戏举例来说：
关闭"difflist"，出现了游戏中部分文本漏翻的情况。但是只打开"difflist"，又会导致回想房间丢失版本更新后多出的新cg。这是因为储存cg的数据是一个list，
多出的新cg会导致新旧两个版本的cg list长度不匹配，而在开启"difflist"的情况下，选择保留了旧版的cg list。
"upperkey"是为了解决上述问题新增的判断条件，储存游戏文本的list和储存游戏事件的list分属不同的层级，它们的key是不同的，那么只需筛选出文本list
所对应的key，就可以实现只对游戏文本应用"difflist"功能。"upperkey"就是用来储存这些文本list所对应的key的。
但是增加"upperkey"后又会出现新问题，那就是被"upperkey"屏蔽掉的list，如果它的内部也存有游戏文本，这些文本就会被漏翻掉。以我用来测试的游戏来说
就是回想房间内的所有文本（CG名称和选项等）都被漏翻了。而这些文本都有一个特点，就是按顺序从上往下替换，基本不会出错。
开启"difflist2"就可以实现这一功能，最终在三个条件共同作用下，我实现了“游戏文本没有漏翻，cg没有缺失”的最理想效果（至少我还没发现其他bug）。
v2.1(2023.6.5):
1.现在所有不含汉字的str都不被认为是str了
2.config增加两项配置"diff"和"difflist"，分别用来调整dict和list的读写方法，
diff用来调整字典中有百分之多少的非str，list，dict数据不匹配时，仍认为这个字典是匹配的，仍对相应的文本进行替换（不匹配时不会替换文本），适当调高
这个数值，有利于减少漏翻，但是过高可能会导致bug，设为0时关闭此功能。
"difflist"为true时，当list长度不匹配，且list内存在文本数据时，会直接用已翻译的旧版list覆盖新版list。一般这种情况是因为汉化组在汉化文本时，
进行了手动换行。为false时，会导致这种文本漏翻，但是设置为true可能会导致bug。
以上两种情况导致的漏翻，均可以通过untrsfix提取出来，进行手动机翻。推荐先开启这两个功能进行尝试，如果出现了bug再关闭这些功能，一般来说
"difflist"导致bug的可能性要大于“diff”
v2.0(2023.6.5):
1.重写了几乎整个脚本，现在采用函数递归的方式读取并修改json文件，能够自动适应任意格式的json文件，大幅提高了普适性，以及降低了漏翻率，
缺点是相较于1.0版本容易出bug